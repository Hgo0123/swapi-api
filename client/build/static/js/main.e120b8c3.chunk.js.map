{"version":3,"sources":["Components/Card.jsx","Components/InputCharacter.jsx","App.js","serviceWorker.js","Components/PlanetList.jsx","Components/StarshipList.jsx","Components/PeopleList.jsx","Components/UserPage.jsx","index.js"],"names":["Card","state","goToUserPage","handleClick","event","preventDefault","setState","this","push","to","pathname","props","user","name","request","className","onClick","Component","InputCharacter","fillState","useState","userInput","setUserInput","type","value","onChange","target","fetch","then","res","json","users","placeholder","App","pages","data","results","nextPage","previousPage","prevProps","prevState","map","Boolean","window","location","hostname","match","PlanetList","userResidents","renderData","format","fetchData","Object","values","forEach","element","residents","rotation_period","orbital_period","diameter","climate","gravity","terrain","population","length","StarshipList","model","starship_class","manufacturer","cost_in_credits","crew","passengers","cargo_capacity","consumables","hyperdrive_rating","PeopleList","userFilms","userHomeworld","film","homeworld","formatHome","title","fetchDataOnce","films","height","mass","hair_color","skin_color","eye_color","birth_year","gender","UserPage","renderList","Root","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e120b8c3.chunk.js","sourcesContent":["import React from 'react';\nimport { Redirect } from 'react-router-dom'\nimport { Component } from 'react';\n\nimport './Card.scss';\n\n\n\n\nclass Card extends Component {\n    state = {\n        goToUserPage: false,\n    }\n    handleClick = (event) => {\n        event.preventDefault()\n        this.setState({\n            goToUserPage: true\n        })\n    }\n    render() {\n        if (this.state.goToUserPage === true) {\n            return <Redirect push to={{\n                pathname: `/${this.props.user.name}`,\n                state: { user: this.props.user, request: this.props.request }\n            }}></ Redirect>\n        }\n        return (\n            <li className=\"list__elem\"> {this.props.user.name} < div className='details' > <a onClick={this.handleClick} className='list__elem__link'>Voir plus...</a></div ></li >\n        )\n\n    }\n}\nexport default Card;","import React from 'react'\nimport { useState } from 'react'\n\nconst InputCharacter = ({ request, fillState }) => {\n    const [userInput, setUserInput] = useState('')\n\n    const onChange = (event) => {\n        const userInput = event.target.value\n        setUserInput(userInput)\n        fetch(`personnages/${request}/${userInput}`)\n            .then(res => res.json())\n            .then(users => fillState(users));\n    }\n\n    return (\n        <input className='input' type='text' value={userInput} onChange={onChange} placeholder={`Search for ${request}`} />\n    )\n}\nexport default InputCharacter","import React, { Component } from 'react';\nimport './App.scss';\n// import './Components/Card.scss';\n\nimport Card from './Components/Card';\nimport InputCharacter from './Components/InputCharacter';\n\n\nclass App extends Component {\n  state = {\n    users: [],\n    pages: 1,\n    request: 'people',\n  };\n\n  fillState = (data) => {\n    this.setState({\n      users: data.results\n    })\n  }\n  componentDidMount() {\n    fetch(`/personnages/${this.state.request}/page/${this.state.pages}`)\n      .then(res => res.json())\n      .then(users => this.fillState(users));\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.pages !== this.state.pages || prevState.request !== this.state.request) {\n      fetch(`/personnages/${this.state.request}/page/${this.state.pages}`)\n        .then(res => res.json())\n        .then(users => this.fillState(users));\n    }\n    if (prevState.request !== this.state.request) {\n      this.setState({\n        pages: 1\n      })\n    }\n  }\n  nextPage = (event) => {\n    event.preventDefault()\n    let pages = this.state.pages\n    pages++\n    this.setState({\n      pages\n    })\n  }\n  previousPage = (event) => {\n    event.preventDefault()\n    let pages = this.state.pages\n    pages--\n    if (pages <= 1) {\n      pages = 1\n    }\n    this.setState({\n      pages\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className='title'>Swapi</h1>\n\n        <InputCharacter request={this.state.request} fillState={this.fillState} />\n        <div className='request-container'>\n          <button className='request-container__btn request-container__btn--search' onClick={() => this.setState({ request: 'planets' })}>Search by planet</button>\n          <button className='request-container__btn request-container__btn--search' onClick={() => this.setState({ request: 'starships' })}>Search by starships</button>\n        </div>\n        <div className='list-container'>\n          <ul className=\"list\">\n            {this.state.users.map(user =>\n              <Card user={user} request={this.state.request} />\n            )}\n          </ul>\n        </div>\n\n        <div className='container'>\n          <button className='container__btn' onClick={this.previousPage}>Previous page</button>\n          <button className='container__btn' onClick={this.nextPage}>Next Page</button>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { Component } from 'react';\n\nclass PlanetList extends Component {\n    state = {\n        userResidents: []\n    }\n    componentDidMount() {\n        this.fetchData(this.props.user.residents)\n    }\n\n    renderData = (data) => {\n        const user = [...this.state.userResidents]\n        const format = <li>{data.name}</li>\n        user.push(format)\n        this.setState({\n            userResidents: user\n        })\n    }\n\n    fetchData = (data) => {\n        Object.values(data).forEach(element => (\n            fetch(element)\n                .then(res => res.json(res))\n                .then(users => this.renderData(users))\n        ))\n    }\n\n    render() {\n        return (\n            <ul className=\"list\" >\n                <li className=\"list__elem\"><div>Rotation period</div><div>{this.props.user.rotation_period}</div></li>\n                <li className=\"list__elem\"><div>Orbital period</div><div>{this.props.user.orbital_period}</div></li>\n                <li className=\"list__elem\"><div>Diameter</div><div>{this.props.user.diameter}</div></li>\n                <li className=\"list__elem\"><div>Climate</div><div>{this.props.user.climate}</div></li>\n                <li className=\"list__elem\"><div>Gravity</div><div>{this.props.user.gravity}</div></li>\n                <li className=\"list__elem\"><div>Terrain</div><div>{this.props.user.terrain}</div></li>\n                <li className=\"list__elem\"><div>Population</div><div>{this.props.user.population}</div></li>\n                <li className=\"list__elem\"><div>Residents</div><div className='wrap'>{this.state.userResidents.length > 0 ? this.state.userResidents : 'Nobody lives here'}</div></li>\n            </ul>\n        )\n    }\n}\n\nexport default PlanetList;","import React from 'react';\n\nconst StarshipList = ({ user }) => {\n    return (\n        <ul className=\"list\">\n            <li className=\"list__elem\"><div>Model</div><div>{user.model} cm</div></li>\n            <li className=\"list__elem\"><div>Starship class</div><div>{user.starship_class}</div></li>\n            <li className=\"list__elem\"><div>Manufacturer</div><div>{user.manufacturer} kg</div></li>\n            <li className=\"list__elem\"><div>Cost</div><div>{user.cost_in_credits}</div></li>\n            <li className=\"list__elem\"><div>Taille</div><div>{user.length}</div></li>\n            <li className=\"list__elem\"><div>Crew</div><div>{user.crew}</div></li>\n            <li className=\"list__elem\"><div>Passengers</div><div>{user.passengers}</div></li>\n            <li className=\"list__elem\"><div>Cargo capacity</div><div>{user.cargo_capacity}</div></li>\n            <li className=\"list__elem\"><div>Consumables</div><div>{user.consumables}</div></li>\n            <li className=\"list__elem\"><div>Hyperdrive rating</div><div>{user.hyperdrive_rating}</div></li>\n        </ul>\n    )\n}\n\nexport default StarshipList;","import React, { Component } from 'react';\n\nclass PeopleList extends Component {\n    state = {\n        userFilms: [],\n        userHomeworld: []\n    }\n    componentDidMount() {\n        this.fetchData(this.props.user.films)\n        this.fetchDataOnce(this.props.user.homeworld)\n    }\n\n    renderData = (data) => {\n        const film = [...this.state.userFilms]\n        const homeworld = [...this.state.userHomeworld]\n        const formatHome = <li>{data.name}</li>\n        const format = <li>{data.title}</li>\n        film.push(format)\n        homeworld.push(formatHome)\n        this.setState({\n            userFilms: film,\n            userHomeworld: homeworld\n        })\n    }\n\n    fetchData = (data) => {\n        Object.values(data).forEach(element => (\n            fetch(element)\n                .then(res => res.json(res))\n                .then(users => this.renderData(users))\n        ))\n    }\n    fetchDataOnce = (data) => {\n        fetch(data)\n            .then(res => res.json(res))\n            .then(users => this.renderData(users))\n    }\n\n    render() {\n        return (\n            <ul className=\"list\">\n                <li className=\"list__elem\"><div>Height</div><div>{this.props.user.height} cm</div></li>\n                <li className=\"list__elem\"><div>Weight</div><div>{this.props.user.mass} kg</div></li>\n                <li className=\"list__elem\"><div>Hair color</div><div>{this.props.user.hair_color === 'n/a' ? 'It\\'s a robot' : this.props.user.hair_color}</div></li>\n                <li className=\"list__elem\"><div>Skin color</div><div>{this.props.user.skin_color}</div></li>\n                <li className=\"list__elem\"><div>Eye color</div><div>{this.props.user.eye_color}</div></li>\n                <li className=\"list__elem\"><div>Birth year</div><div>{this.props.user.birth_year}</div></li>\n                <li className=\"list__elem\"><div>Gender</div><div>{this.props.user.gender === 'n/a' ? 'It\\'s a robot' : this.props.user.gender}</div></li>\n                <li className=\"list__elem\"><div>Homeworld</div><div>{this.state.userHomeworld}</div></li>\n                <li className=\"list__elem\"><div>Films</div><div>{this.state.userFilms}</div></li>\n            </ul>\n        )\n    }\n}\n\nexport default PeopleList;","import React, { Component } from 'react'\nimport './userPage.scss'\n\nimport PlanetList from './PlanetList'\nimport StarshipList from './StarshipList'\nimport PeopleList from './PeopleList'\n\n\nclass UserPage extends Component {\n\n    renderList = () => {\n        const { user, request } = this.props.location.state\n        if (request === 'people') {\n            return <PeopleList user={user} />\n        } else if (request === 'planets') {\n            return <PlanetList user={user} request={request} />\n        } else {\n            return <StarshipList user={user} />\n        }\n    }\n\n    render() {\n        const { user } = this.props.location.state\n        return (\n            <div className=\"list-container\" >\n                <h2 className='title'>{user.name}</h2>\n                {this.renderList()}\n            </div >\n        )\n    }\n}\n\nexport default UserPage;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport UserPage from './Components/UserPage'\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch\n} from 'react-router-dom'\n\nconst Root = () => (\n\n  <Router>\n    <Switch>\n      <Route exact path='/' component={App} />\n      <Route path='/:name' component={UserPage} />\n      {/* <Route component={NotFound} /> */}\n    </Switch>\n  </Router>\n\n)\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}